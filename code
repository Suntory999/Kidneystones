#############################################
# Example R Code for NHANES Fatty Acids and Kidney Stones Analysis
# Revised to use missForest for single imputation instead of multiple imputation:
# 1. Data reading and preprocessing
# 2. Missing data imputation using missForest
# 3. Complex survey design
# 4. Main logistic regression
# 5. Interaction (subgroup) analysis
# 6. Nonlinear relationship fitting (e.g., GAM or restricted cubic splines)
# 7. Sensitivity analyses (e.g., adding sodium, animal protein, vitamin C)
# 8. Code to produce tables and figures
# NOTE: Adapt variable names and model specifications to your dataset.
#############################################

# Load necessary packages
library(survey)
library(missForest)
library(dplyr)
library(ggplot2)
library(mgcv)   # for GAM smoothing
library(splines)
library(broom)

# Step 1: Read and prepare data
# Replace with actual file name or code to read NHANES data
# nhanes_data <- read.csv("nhanes_merged_data.csv")

# Ensure key variables exist:
# kidney_stones (binary outcome), fatty_acid_intake (continuous, g/day),
# total_energy (kcal), age, sex, BMI, diabetes, race, education, etc.

# Step 2: Imputation with missForest
# Check missing data pattern if desired
# summary(nhanes_data)

# Impute missing data using missForest
# missForest returns a list with $ximp containing the imputed dataset
imputed_result <- missForest(nhanes_data, maxiter=10, ntree=100)
imputed_data <- imputed_result$ximp

# Step 3: Complex Survey Design
# Suppose design variables: wtsaf = survey weight, sdmvstra = strata, sdmvpsu = psu
nhanes_design <- svydesign(id = ~sdmvpsu, strata = ~sdmvstra, weights = ~wtsaf, data = imputed_data, nest=TRUE)

# Step 4: Main logistic regression model
# Model includes total_energy and other covariates:
# Adjust interpretation as needed (per 10 g/day increment in fatty_acid_intake)
main_fit <- svyglm(kidney_stones ~ I(fatty_acid_intake/10) + total_energy + age + sex + BMI + diabetes + 
                     race + education + smoking + alcohol + hypertension + HDL + total_chol + 
                     PIR + physical_activity + water_intake + protein_intake + calcium_supp,
                   design = nhanes_design, family = quasibinomial())

summary(main_fit)
exp(coef(main_fit))       # Odds ratios
exp(confint(main_fit))    # 95% CIs

# Step 5: Interaction and Subgroup Analyses
# For example, test interaction with diabetes
int_fit <- svyglm(kidney_stones ~ I(fatty_acid_intake/10)*diabetes + total_energy + age + sex + BMI + ...,
                  design = nhanes_design, family = quasibinomial())
summary(int_fit)

# Extract interaction estimate
# Check if interaction term is in the model
coef(int_fit)
confint(int_fit)

# Subgroup analysis by diabetes status (e.g., stratified models)
sub_no_diab <- subset(nhanes_design, diabetes == 0)
sub_diab <- subset(nhanes_design, diabetes == 1)

fit_no_diab <- svyglm(kidney_stones ~ I(fatty_acid_intake/10) + total_energy + age + sex + BMI + ...,
                      design = sub_no_diab, family = quasibinomial())
fit_diab <- svyglm(kidney_stones ~ I(fatty_acid_intake/10) + total_energy + age + sex + BMI + ...,
                   design = sub_diab, family = quasibinomial())

summary(fit_no_diab)
summary(fit_diab)

# Step 6: Nonlinear Relationship - Using Splines or GAM
# Example using restricted cubic splines
fit_nonlinear <- svyglm(kidney_stones ~ ns(fatty_acid_intake, df=3) + total_energy + age + sex + ...,
                        design = nhanes_design, family = quasibinomial())
summary(fit_nonlinear)

# For GAM:
# Note: svygam might need additional steps or use mgcv with pweights.
# fit_gam <- some approach if feasible

# Step 7: Sensitivity Analyses
# Include additional dietary factors if available
fit_sens <- svyglm(kidney_stones ~ I(fatty_acid_intake/10) + total_energy + age + sex + BMI + 
                     sodium + animal_protein + vitaminC + ...,
                   design = nhanes_design, family = quasibinomial())
summary(fit_sens)

# Compare estimates from main model and sensitivity model

# Step 8: Tables and Figures
# Example: Extract coefficients and create a summary table
main_coefs <- data.frame(Estimate=coef(main_fit), CI.lower=confint(main_fit)[,1], CI.upper=confint(main_fit)[,2])
main_coefs$OR <- exp(main_coefs$Estimate)
main_coefs$OR_CI.lower <- exp(main_coefs$CI.lower)
main_coefs$OR_CI.upper <- exp(main_coefs$CI.upper)
write.csv(main_coefs, "main_results.csv", row.names=TRUE)

# Example plot for nonlinear relationship
fa_grid <- data.frame(fatty_acid_intake=seq(min(imputed_data$fatty_acid_intake, na.rm=TRUE),
                                            max(imputed_data$fatty_acid_intake, na.rm=TRUE), length=100),
                      total_energy=mean(imputed_data$total_energy, na.rm=TRUE),
                      age=mean(imputed_data$age, na.rm=TRUE),
                      sex="Male", # adapt as needed
                      BMI=mean(imputed_data$BMI, na.rm=TRUE),
                      # include other covariates as needed
                      ...)

pred <- predict(fit_nonlinear, newdata=fa_grid, type="response")
fa_grid$predicted <- pred
ggplot(fa_grid, aes(x=fatty_acid_intake, y=predicted)) + geom_line() + theme_minimal() +
  labs(x="Fatty Acid Intake (g/day)", y="Predicted Probability of Kidney Stones")

#############################################
